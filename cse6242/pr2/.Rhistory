ggpairs(df[numeric_cols])
ggpairs(df[c('imdbRating', 'imdbVotes', 'tomatoMeter', 'tomatoRating')])
ggpairs(df[c('imdbRating', 'tomatoRating', 'tomatoUserRating')])
ggpairs(df[c('imdbVotes', 'tomatoReviews', 'tomatoUserReviews')])
View(df)
numeric_cols
ggpairs(df[c('imdbRating', 'tomatoRating', 'tomatoUserRating', 'tomatoMeter')])
ggpairs(df[c('imdbVotes', 'tomatoReviews', 'tomatoUserReviews')])
3^2
log(3)
source('~/.active-rstudio-document', echo=TRUE)
numeric_cols
ggplot(df, aes(Budget, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(logbudget, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
df_power_budget = create_power_transforms(df$Budget)
train_df_power_budget = create_power_transforms(train_df$Budget)
test_df_power_budget = create_power_transforms(test_df$Budget)
df$budget2 = df_power_budget$x2
train_df$budget2 = train_df_power_budget$x2
test_df$budget2 = test_df_power_budget$x2
df$logbudget = df_power_budget$logx
train_df$logbudget = train_df_power_budget$logx
test_df$logbudget = test_df_power_budget$logx
ggplot(df, aes(logbudget, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(budget2, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
df[c('test')] = 1
View(df)
paste0('test', '2')
df[c(paste0('test', '2'))]
df[c(paste0('test', '2'))] = 1
View(df)
column='test'
df$test2 = NULL
df[c(paste0(column, '2'))] = df[c(column)] ^ 2
View(df)
create_power_transforms = function(df, column){
# Keyword Args:
#  df: DataFrame with data that you want to add power transformations to
#  column: Column within df that you want to do power transformations to
# Returns:
#  df: DataFrame with new columns as transformations
# Power Transforms
df[c(paste0(column, '2'))] = df[c(column)] ^ 2
df[c(paste0('log', column))] = log(df[c(column)])
return(df)
}
df = create_power_transforms(df, 'Budget')
View(df)
df = create_power_transforms(df, 'Budget')
train_df = create_power_transforms(train_df, 'Budget')
test_df = create_power_transforms(test_df, 'Budget')
df = create_power_transforms(df, 'Runtime')
train_df = create_power_transforms(train_df, 'Runtime')
test_df = create_power_transforms(test_df, 'Runtime')
ggplot(df, aes(Runtime2, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(Runtime, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(logRuntime, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(imdbRating, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
df = create_power_transforms(df, 'imdbRating')
train_df = create_power_transforms(train_df, 'imdbRating')
test_df = create_power_transforms(test_df, 'imdbRating')
ggplot(df, aes(logimdbRating, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(imdbRating2, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(imdbRating, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(imdbRating2, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
View(df)
ggplot(df, aes(imdbRating, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
create_power_transforms = function(df, column){
# Keyword Args:
#  df: DataFrame with data that you want to add power transformations to
#  column: Column within df that you want to do power transformations to
# Returns:
#  df: DataFrame with new columns as transformations
# Power Transforms
df[c(paste0(column, '2'))] = df[c(column)] ^ 2
df[c(paste0(column, '4'))] = df[c(column)] ^ 4
df[c(paste0('log', column))] = log(df[c(column)])
return(df)
}
df = create_power_transforms(df, 'imdbRating')
train_df = create_power_transforms(train_df, 'imdbRating')
test_df = create_power_transforms(test_df, 'imdbRating')
ggplot(df, aes(imdbRating4, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(imdbRating2, Gross)) +
geom_point()
ggplot(df, aes(imdbRating, Gross)) +
geom_point()
ggplot(df, aes(imdbRating, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(imdbVotes, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(Budget, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(Budget2, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(logBudget, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(imdbVotes, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
df = create_power_transforms(df, 'imdbVotes')
train_df = create_power_transforms(train_df, 'imdbVotes')
test_df = create_power_transforms(test_df, 'imdbVotes')
ggplot(df, aes(imdbVotes2, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(logimdbVotes, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
numeric_cols
ggplot(df, aes(Year, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
df = create_power_transforms(df, 'Year')
train_df = create_power_transforms(train_df, 'Year')
test_df = create_power_transforms(test_df, 'Year')
ggplot(df, aes(logYear, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(Year, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(logYear, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(Year, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
df[df$Year=2017]
df[df$Year==2017]
df[df$Year==2017, ]
ggplot(df, aes(x=Year)) + geom_histogram()
table(df$Year)
table(df$released_year)
numeric_cols
df = df[which(df$released_year <= 2017), ]
ggplot(df, aes(released_year, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
df = df[which(df$released_year < 2017), ]
ggplot(df, aes(released_year, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
df = create_power_transforms(df, 'released_year')
train_df = create_power_transforms(train_df, 'released_year')
test_df = create_power_transforms(test_df, 'released_year')
ggplot(df, aes(logreleased_year, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(logreleased_year, Gross)) +
geom_point()
ggplot(df, aes(year, Gross)) +
geom_point()
ggplot(df, aes(logreleased_year, Gross)) +
geom_point()
ggplot(df, aes(released_year, Gross)) +
geom_point()
ggplot(df, aes(Budget, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
df$budget_rounded = round_any(df$Budget, 10000000, f = floor)
df$budget_rounded[df$Budget >= 60000000] = 60000000
df$budget_rounded = as.character(df$budget_rounded)
df$budget_rounded[df$budget_rounded == '600000000'] = 'Over 60M'
ggplot(df5, aes(as.factor(budget_rounded), Gross)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Budget Rounded") +
ggtitle('Distribution of Gross by Budget')
df$budget_rounded = round_any(df$Budget, 10000000, f = floor)
df$budget_rounded[df$Budget >= 60000000] = 60000000
df$budget_rounded = as.character(df$budget_rounded)
df$budget_rounded[df$budget_rounded == '600000000'] = 'Over 60M'
ggplot(df, aes(as.factor(budget_rounded), Gross)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Budget Rounded") +
ggtitle('Distribution of Gross by Budget')
ggplot(df, aes(Budget, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(Budget, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
source('~/.active-rstudio-document', echo=TRUE)
ggplot(df, aes(imdbRating, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
source('~/.active-rstudio-document', echo=TRUE)
percentage_improvement_in_rsme_model2 = 1.0 * abs(eval_model2$best_test_rmse - eval_model1$best_test_rmse) / eval_model1$bets_test_rsme
percentage_improvement_in_rsme_model2
abs(eval_model2$best_test_rmse - eval_model1$best_test_rmse)
1.0 * abs(eval_model2$best_test_rmse - eval_model1$best_test_rmse)
1.0 * abs(eval_model2$best_test_rmse - eval_model1$best_test_rmse) / percentage_improvement_in_rsme_model2 = 1.0 * abs(eval_model2$best_test_rmse - eval_model1$best_test_rmse) / eval_model1$best_test_rsme
percentage_improvement_in_rsme_model2 = 1.0 * abs(eval_model2$best_test_rmse - eval_model1$best_test_rmse) / eval_model1$best_test_rsme
percentage_improvement_in_rsme_model2
eval_model1$best_test_rsme
percentage_improvement_in_rsme_model2 = 1.0 * abs(eval_model2$best_test_rmse - eval_model1$best_test_rmse) / eval_model1$best_test_rmse
eval_model1$best_test_rsme
percentage_improvement_in_rsme_model2
top_ten_genres
test = function(numTopCols=10){
# Keyword Args:
#  df: DataFrame with data and column you want to one-hot-encode
#  column: Column within the df that you want to one-hot encode
# Returns:
#  binned: New binned transformed vector
# Power Transforms
print(numTopCols)
}
test()
column='Genre'
df = cbind(df, mtabulate(strsplit(df[c(column)], ", ")))
create_one_hot_encoded = function(df, column, numTopCols=10){
# Keyword Args:
#  df: DataFrame with data and column you want to one-hot-encode
#  column: Column within the df that you want to one-hot encode
# Returns:
#  df: Original DataFrame with newly appended columns of numTopCols highest occuring value of Column
# Example of how to one-hot encode: https://stackoverflow.com/questions/39778387/r-dataframe-one-hot-encoding-of-column-containing-multiple-terms
df = cbind(df, mtabulate(strsplit(df[c(column)], ", ")))
cols = unique(unlist(strsplit(df[c(column)], ', ')))
top_cols = sort(colSums(df[cols]), decreasing=TRUE)
top_cols_names = names(top_cols[1:numTopCols])
non_top_cols_names = setdiff(cols, top_cols_names)
return(df)
}
setwd("~/git/GeorgiaTech/cse6242/pr2")
load('movies_merged')
df = movies_merged
cat("Dataset has", dim(df)[1], "rows and", dim(df)[2], "columns", end="\n", file="")
colnames(df)
library(GGally)  # Used for ggpairs
library(ggplot2)
library(lubridate)  # Used to extract year from Released
library(qdapTools)  # Used for mtabulate (to one-hot encode a column)
library(reshape)  # Used for melt function
library(stringi)  # Used for processing Awards
# TODO: Remove all rows from df that do not correspond to movies
df <- df[df$Type == "movie",]
# TODO: Remove rows with missing Gross value
df = df[which(!is.na(df$Gross)), ]
df$released_year = year(df$Released)
df = df[which(df$released_year >= 2000), ]
df$not_matched = (abs(df$Year != df$released_year) >= 2)
# Number of rows with non-null Gross Value
print(nrow(df))
print(nrow(df[which(!is.na(df$Gross)), ]))
# Remove mismatched rows
df = df[which(!(df$not_matched == TRUE)), ]
print(nrow(df))
# TODO: Exclude the `Domestic_Gross` column
df$Domestic_Gross = NULL
times = unlist(r)
minutes = 0
for (i in 1:length(times) - 1){
if (times[i + 1] == 'h'){
minutes = minutes + as.numeric(times[i]) * 60
} else if (times[i + 1] == 'min'){
minutes = minutes + as.numeric(times[i])
}
}
if (minutes == 0){
return(NA)
} else{
return(minutes)
}
}
y=strsplit(df$Runtime,' ')
new_runtimes = unlist(lapply(y, extract_runtime))
df$Runtime = new_runtimes
extract_runtime = function(r){
times = unlist(r)
minutes = 0
for (i in 1:length(times) - 1){
if (times[i + 1] == 'h'){
minutes = minutes + as.numeric(times[i]) * 60
} else if (times[i + 1] == 'min'){
minutes = minutes + as.numeric(times[i])
}
}
if (minutes == 0){
return(NA)
} else{
return(minutes)
}
}
y=strsplit(df$Runtime,' ')
new_runtimes = unlist(lapply(y, extract_runtime))
df$Runtime = new_runtimes
column='Genre'
df = cbind(df, mtabulate(strsplit(df[c(column)], ", ")))
View(df)
df[c('Genre')]
df$Genre <- gsub('Sci-Fi', 'SciFi', df$Genre)
df$Genre <- gsub('N/A', 'na', df$Genre)
df = cbind(df, mtabulate(strsplit(df[c(column)], ", ")))
df = cbind(df, mtabulate(strsplit(df$Genre, ", ")))
df$Genre
df$column
df[c(Genre)]
df[c('Genre')]
df[c('Genre'),]
as.vector(df[c('Genre')])
df$Genre
df[c('Genre')]
df$Genre
df[c('Genre')]
df['Genre']
df[['Genre']]
df$Genre
df = cbind(df, mtabulate(strsplit(df[[column]], ", ")))
cols = unique(unlist(strsplit(df[[column]], ', ')))
top_cols = sort(colSums(df[cols]), decreasing=TRUE)
top_cols_names = names(top_cols[1:numTopCols])
non_top_cols_names = setdiff(cols, top_cols_names)
numTopCols=10
top_cols_names = names(top_cols[1:numTopCols])
non_top_cols_names = setdiff(cols, top_cols_names)
top_cols_names
non_top_cols_names
df = df[, non_top_cols_names, drop=TRUE]
View(df)
df = subset(df, select=-non_top_cols_names)
df = df[, non_top_cols_names, drop=FALSE]
df[non_top_cols_names] = list(NULL)
print(unique(unlist(strsplit(df$Genre, ', '))))
source('~/.active-rstudio-document', echo=TRUE)
print(unique(unlist(strsplit(df$Genre, ', '))))
print(unique(unlist(strsplit(df$Actors, ', '))))
print(unique(unlist(strsplit(df$Director, ', '))))
actor_one_hot_encoded = create_one_hot_encoded(df, 'Actors', 20)
View(actor_one_hot_encoded)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(df)
top_directors
create_one_hot_encoded = function(df, column, numTopCols=10){
# Keyword Args:
#  df: DataFrame with data and column you want to one-hot-encode
#  column: Column within the df that you want to one-hot encode
# Returns:
#  df: Original DataFrame with newly appended columns of numTopCols highest occuring value of Column
#  top_cols: The top_cols that were returned
# Example of how to one-hot encode: https://stackoverflow.com/questions/39778387/r-dataframe-one-hot-encoding-of-column-containing-multiple-terms
df = cbind(df, mtabulate(strsplit(df[[column]], ", ")))
cols = unique(unlist(strsplit(df[[column]], ', ')))
top_cols = sort(colSums(df[cols]), decreasing=TRUE)
top_cols_names = names(top_cols[1:numTopCols])
non_top_cols_names = setdiff(cols, top_cols_names)
# Remove the non_top_cols
df[non_top_cols_names] = list(NULL)
return(list('df'=df,
'top_cols'=top_cols_names))
}
genre_one_hot_encoded = create_one_hot_encoded(df, 'Genre', 10)
df = genre_one_hot_encoded$df
top_genres = genre_one_hot_encoded$top_cols
actor_one_hot_encoded = create_one_hot_encoded(df, 'Actors', 20)
df = actor_one_hot_encoded$df
top_actors = actor_one_hot_encoded$top_cols
director_one_hot_encoded = create_one_hot_encoded(df, 'Director', 20)
df = director_one_hot_encoded$df
top_directors = director_one_hot_encoded$top_cols
top_directors
top_actors
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
topActors
topactors
top_actors
source('~/.active-rstudio-document', echo=TRUE)
model3_cols
source('~/.active-rstudio-document', echo=TRUE)
model3_cols
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
model3_cols
print(summary(lm(model3_exp, data=df))
)
model2_cols
model3_cols
View(df)
source('~/.active-rstudio-document', echo=TRUE)
top_ratings
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(df)
df$rated_cleaned
create_one_hot_encoded(df, 'rated_cleaned', 5)
create_one_hot_encoded(df, 'rated_cleaned', 4)
column = 'rated_cleaned'
cbind(df, mtabulate(strsplit(df[[column]], ",")))
numTopCols=5
df = cbind(df, mtabulate(strsplit(df[[column]], ",")))
View(df)
cols = unique(unlist(strsplit(df[[column]], ',')))
cols
top_cols = sort(colSums(df[cols]), decreasing=TRUE)
df[cols]
df$R
df[cols]
cols
df$PG13
cols
source('~/.active-rstudio-document', echo=TRUE)
top_ratings
ggplot(df, aes(rated_cleaned, Gross)) +
geom_bar(stat='summary', fill.y='mean')
ggplot(df, aes(rated_cleaned, Gross)) +
geom_bar(stat='summary')
df$family_friendly = as.numeric(df$G + df$PG + dfPG13 >= 1)
df$family_friendly = as.numeric(df$G + df$PG + df$PG13 >= 1)
df$family_friendly_budget = df$family_friendly * df$Budget
ggpairs(df[c('family_friendly', 'Budget', 'family_friendly_budget, Gross')])
df$family_friendly = as.numeric(df$G + df$PG + df$PG13 >= 1)
df$family_friendly_budget = df$family_friendly * df$Budget
ggpairs(df[c('family_friendly', 'Budget', 'family_friendly_budget, Gross')])
df$family_friendly
df$Budget
df$Gross
df$family_friendly_budget
df$family_friendly
df$Budget
ggpairs(df[c('family_friendly', 'Budget', 'family_friendly_budget, Gross')])
ggpairs(df[c('family_friendly', 'Budget', 'family_friendly_budget', 'Gross')])
df$family_friendly_wins = df$family_friendly * df$wins
ggpairs(df[c('family_friendly', 'wins', 'family_friendly_wins', 'Gross')])
df$family_friendly_nominations = df$family_friendly * df$nominations
ggpairs(df[c('family_friendly', 'nominations', 'family_friendly_nominations', 'Gross')])
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(df, aes(as.factor(released_year), Gross)) +
geom_boxplot()
ggplot(df, aes(as.factor(released_year), Gross)) +
geom_bar(stat='summary')
ggplot(df, aes(as.factor(released_year), Gross)) +
geom_point(stat='summary')
ggplot(df, aes(as.factor(released_year), Gross)) +
geom_bar(stat='summary')
df$early_2000s = as.numeric(df$released_year <= 2004)
train_df$early_2000s = as.numeric(train_df$released_year <= 2004)
test_df$early_2000s = as.numeric(test_df$released_year <= 2004)
df$mid_2000s = as.numeric(df$released_year >= 2005 & df$released_year <= 2009)
train_df$mid_2000s = as.numeric(train_df$released_year >= 2005 & train_df$released_year <= 2009)
test_df$mid_2000s = as.numeric(test_df$released_year >= 2005 & test_df$released_year <= 2009)
df$post_2010 = as.numeric(df$released_year >= 2010)
train_df$post_2010 = as.numeric(train_df$released_year >= 2010)
test_df$post_2010 = as.numeric(test_df$released_year >= 2010)
ggpairs(df[c('family_friendly', 'released_year', 'Gross')])
ggpairs(df[c('family_friendly', 'as.factor(released_year)', 'Gross')])
ggpairs(df[c('family_friendly', as.factor(released_year), 'Gross')])
ggpairs(df[c('family_friendly', as.factor('released_year'), 'Gross')])
source('~/.active-rstudio-document', echo=TRUE)
ggpairs(df[c('Budget', 'Budget2', 'Budgetneg1', 'Gross')])
ggpairs(df[c('Budget', 'Budget2', 'Budgetneg1', 'logBudget', 'Gross')])
ggpairs(df[c('Runtime', 'Runtime2', 'Runtimeneg1', 'logRuntime', 'Gross')])
ggplot(df, aes(Runtime, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(Runtime, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point") +
ggtitle('Average Gross vs Runtime')
ggplot(df, aes(Runtime, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point") +
geom_vline(xintercept=75) +
ggtitle('Average Gross vs Runtime')
ggplot(df, aes(Runtime, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point") +
geom_vline(xintercept=75, color='green', linetype='longdash') +
ggtitle('Average Gross vs Runtime')
ggplot(df, aes(Runtime, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point") +
geom_vline(xintercept=75, color='orange', linetype='longdash') +
geom_vline(xintercept=125, color='blue', linetype='longdash') +
ggtitle('Average Gross vs Runtime')
ggpairs(df[c('Runtime', 'Runtime2', 'Runtimeneg1', 'logRuntime', 'Gross')])
ggpairs(df[c('imdbRating', 'imdbRating2', 'imdbRatingneg1', 'logimdbRating', 'Gross')])
ggplot(df, aes(imdbVotes, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggpairs(df[c('imdbVotes', 'imdbVotes2', 'imdbVotesneg1', 'logimdbVotes', 'Gross')])
ggplot(df, aes(as.factor(released_year), Gross)) +
geom_point(stat='summary') +
ggtitle('Relationship between Gross and Released Year')
ggpairs(df[c('released_year', 'released_year2', 'released_yearneg1', 'logreleased_year', 'Gross')])
ggplot(df, aes(as.factor(released_year), Gross)) +
geom_point(stat='summary') +
ggtitle('Relationship between Gross and Released Year')
ggplot(df, aes(as.factor(released_year), Gross)) +
geom_point(stat='summary') +
geom_vline(xintercept=2004, color='orange', linetype='longdash') +
geom_vline(xintercept=2009, color='blue', linetype='longdash') +
ggtitle('Relationship between Gross and Released Year')
ggplot(df, aes(released_year, Gross)) +
geom_point(stat='summary') +
geom_vline(xintercept=2004, color='orange', linetype='longdash') +
geom_vline(xintercept=2009, color='blue', linetype='longdash') +
ggtitle('Relationship between Gross and Released Year')
ggplot(df, aes(released_year, Gross)) +
geom_point(stat='summary') +
geom_vline(xintercept=2004.5, color='orange', linetype='longdash') +
geom_vline(xintercept=2009.5, color='blue', linetype='longdash') +
ggtitle('Relationship between Gross and Released Year')
df$released_year_post_2010 = df$released_year * df$post_2000s
df$released_year_post_2010 = df$released_year * df$post_2010
strsplit(df[['Language']], ",")
length(strsplit(df[['Language']], ","))
?sapply
sapply(strsplit(df[['Language']], ",")), length)
sapply(strsplit(df[['Language']], ","), length)
df$number_of_languages = sapply(strsplit(df[['Language']], ","), length)
df$number_of_languages
