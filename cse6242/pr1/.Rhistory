if (times[i + 1] == 'h'){
minutes = minutes + as.numeric(times[i]) * 60
} else if (times[i + 1] == 'min'){
minutes = minutes + as.numeric(times[i])
}
}
if (minutes == 0){
return(NA)
} else{
return(minutes)
}
}
y=strsplit(df$Runtime,' ')
new_runtimes = unlist(lapply(y, extract_runtime))
df$Runtime = new_runtimes
cols = c('Runtime', 'Year', 'Budget')
cols = c('Title', 'Gross', 'Runtime', 'Budget', 'Released', 'Action', 'Adult', 'Adventure', 'Animation', 'Biography', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Family', 'Fantasy', 'Film-Noir', 'Game-Show', 'History', 'Horror', 'Music', 'Musical', 'Mystery', 'N/A', 'News', 'Reality-TV', 'Romance', 'Sci-Fi', 'Short', 'Sport', 'Talk-Show', 'Thriller', 'War', 'Western')
df5 = df[cols]
print(summary(df5))
print(head(df5))
ggplot(df, aes(Runtime, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(Budget, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
df5.long = melt(df5, id.vars=c('Title', 'Gross', 'Runtime', 'Budget', 'Released'), variable.name='genre')
# Removing rows where value is 0 to answer the question
# This is because when value is 0, that means movie is not that genre.
df5.long = df5.long[apply(df5.long['value'], 1, function(z) !any(z==0)),]
View(df5.long)
ggplot(df5.long[df5.long$runtime_categorical=='short', ], aes(as.factor(Genre), Gross)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Genre")
ggplot(df5.long[df5.long$runtime_categorical=='short', ], aes(as.factor(genre), Gross)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Genre")
View(df5.long)
df5.long = melt(df5, id.vars=c('Title', 'Gross', 'Runtime', 'runtime_categorical', 'Budget', 'Released'), variable.name='genre')
# Removing rows where value is 0 to answer the question
# This is because when value is 0, that means movie is not that genre.
df5.long = df5.long[apply(df5.long['value'], 1, function(z) !any(z==0)),]
ggplot(df5.long[df5.long$runtime_categorical=='short', ], aes(as.factor(genre), Gross)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Genre")
cols = c('Title', 'Gross', 'Runtime', 'Budget', 'Released', 'Action', 'Adult', 'Adventure', 'Animation', 'Biography', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Family', 'Fantasy', 'Film-Noir', 'Game-Show', 'History', 'Horror', 'Music', 'Musical', 'Mystery', 'N/A', 'News', 'Reality-TV', 'Romance', 'Sci-Fi', 'Short', 'Sport', 'Talk-Show', 'Thriller', 'War', 'Western')
df5 = df[cols]
print(summary(df5))
print(head(df5))
# Create three categorical values based on distribution of 25th, and 75 percentiles
df$runtime_categorical = ifelse(df$Runtime <= 68, 'short', ifelse(df$Runtime <= 101, 'medium', 'long'))
ggplot(df, aes(Runtime, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(Budget, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
# Next melt the df to get genre as one column (like in question 3) and plot grouped by genre
df5.long = melt(df5, id.vars=c('Title', 'Gross', 'Runtime', 'runtime_categorical', 'Budget', 'Released'), variable.name='genre')
df$runtime_categorical = ifelse(df$Runtime <= 68, 'short', ifelse(df$Runtime <= 101, 'medium', 'long'))
cols = c('Title', 'Gross', 'Runtime', 'runtime_categorical', 'Budget', 'Released', 'Action', 'Adult', 'Adventure', 'Animation', 'Biography', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Family', 'Fantasy', 'Film-Noir', 'Game-Show', 'History', 'Horror', 'Music', 'Musical', 'Mystery', 'N/A', 'News', 'Reality-TV', 'Romance', 'Sci-Fi', 'Short', 'Sport', 'Talk-Show', 'Thriller', 'War', 'Western')
df5 = df[cols]
print(summary(df5))
print(head(df5))
ggplot(df, aes(Runtime, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(Budget, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
# Next melt the df to get genre as one column (like in question 3) and plot grouped by genre
df5.long = melt(df5, id.vars=c('Title', 'Gross', 'Runtime', 'runtime_categorical', 'Budget', 'Released'), variable.name='genre')
# Removing rows where value is 0 to answer the question
# This is because when value is 0, that means movie is not that genre.
df5.long = df5.long[apply(df5.long['value'], 1, function(z) !any(z==0)),]
ggplot(df5.long[df5.long$runtime_categorical=='short', ], aes(as.factor(genre), Gross)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Genre")
# See https://stackoverflow.com/questions/20679702/r-find-column-with-the-largest-column-sum as reference
cols = setdiff(cols, 'Genre')
colCount = colSums(df[cols])
topTenIds = order(colCount,decreasing=TRUE)[1:10]
topTenGenres = names(df[cols][topTenIds])
# The top 10 most common genres are
print(topTenGenres)
# Probably need to do some manual "stacking" of dataframes by each of the top 10 most common genres.
# Note that I was somewhat confused on what "relative proportions of movies" meant. I found this helpful
# https://piazza.com/class/j6gt7ycx6nk145?cid=396
# Suppose you have ten ice creams.  Let's say that four of them are Chocolate ice cream.  What is the relative proportion of Chocolate ice cream ?   --> 4 / 10
cols3 = c('Title', 'Runtime', topTenGenres)
df3 = df[cols3]
print(summary(df3))
print(head(df3))
library(reshape2)
df3.long = melt(df3, id.vars=c('Title', 'Runtime'))
# Removing rows where value is 0 to answer the question
# This is because when value is 0, that means movie is not that genre.
df3.long = df3.long[apply(df3.long['value'],1,function(z) !any(z==0)),]
print(summary(df3.long))
print(head(df3.long))
# Finally plot relative proportions
# https://sebastiansauer.github.io/percentage_plot_ggplot2_V2/
ggplot(df3.long, aes(x=variable)) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
ylab('Relative Proportion')
cols = setdiff(cols, 'Genre')
colCount = colSums(df[cols])
topTenIds = order(colCount,decreasing=TRUE)[1:10]
topTenGenres = names(df[cols][topTenIds])
# The top 10 most common genres are
print(topTenGenres)
load('movies_merged')
cat("Dataset has", dim(movies_merged)[1], "rows and", dim(movies_merged)[2], "columns", end="\n", file="")
df = movies_merged
cat("Column names:", end="\n", file="")
colnames(df)
library(plyr)
library(ggplot2)
library(GGally)
library(qdapTools)
library(tm)
df2 <- df[df$Type == "movie",]
original_dim = dim(df)
new_dim = dim(df2)
df = df2
# Differences in rows
print(original_dim[1] - new_dim[1])
extract_runtime = function(r){
times = unlist(r)
minutes = 0
for (i in 1:length(times) - 1){
if (times[i + 1] == 'h'){
minutes = minutes + as.numeric(times[i]) * 60
} else if (times[i + 1] == 'min'){
minutes = minutes + as.numeric(times[i])
}
}
if (minutes == 0){
return(NA)
} else{
return(minutes)
}
}
y=strsplit(df$Runtime,' ')
new_runtimes = unlist(lapply(y, extract_runtime))
df$Runtime = new_runtimes
cols = c('Runtime', 'Year', 'Budget')
```
ggplot(df, aes(x=Runtime)) +
geom_histogram() +
ggtitle('Histogram of Runtime (minutes)')
# Now we need to show distribution of runtime by decade. Do a boxplot grouped by decade.
df$decade = round_any(df$Year, 10, f = floor)
ggplot(df, aes(as.factor(decade), Runtime)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("decade")
# Now we need to show distribution of runtime by Budget. Do a boxplot grouped by budget
df$budget_rounded = round_any(df$Budget, 10000000, f = floor)
df$budget_rounded[df$Budget >= 60000000] = 60000000
df$budget_rounded = as.character(df$budget_rounded)
df$budget_rounded[df$budget_rounded == '600000000'] = 'Over 60M'
ggplot(df, aes(as.factor(budget_rounded), Runtime)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Budget Rounded to Nearest 10M")
# TODO: Replace Genre with a collection of binary columns
# All unique genres in the dataframe
print(unique(unlist(strsplit(df$Genre, ', '))))
# Example of how to one-hot encode: https://stackoverflow.com/questions/39778387/r-dataframe-one-hot-encoding-of-column-containing-multiple-terms
df = cbind(df, mtabulate(strsplit(df$Genre, ", ")))
cols = c('Genre', 'Action', 'Adult', 'Adventure', 'Animation', 'Biography', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Family', 'Fantasy', 'Film-Noir', 'Game-Show', 'History', 'Horror', 'Music', 'Musical', 'Mystery', 'N/A', 'News', 'Reality-TV', 'Romance', 'Sci-Fi', 'Short', 'Sport', 'Talk-Show', 'Thriller', 'War', 'Western')
# Remove column from dataframe
df$Genre = NULL
# See https://stackoverflow.com/questions/20679702/r-find-column-with-the-largest-column-sum as reference
cols = setdiff(cols, 'Genre')
colCount = colSums(df[cols])
topTenIds = order(colCount,decreasing=TRUE)[1:10]
topTenGenres = names(df[cols][topTenIds])
# The top 10 most common genres are
print(topTenGenres)
# Probably need to do some manual "stacking" of dataframes by each of the top 10 most common genres.
# Note that I was somewhat confused on what "relative proportions of movies" meant. I found this helpful
# https://piazza.com/class/j6gt7ycx6nk145?cid=396
# Suppose you have ten ice creams.  Let's say that four of them are Chocolate ice cream.  What is the relative proportion of Chocolate ice cream ?   --> 4 / 10
cols3 = c('Title', 'Runtime', topTenGenres)
df3 = df[cols3]
print(summary(df3))
print(head(df3))
library(reshape2)
df3.long = melt(df3, id.vars=c('Title', 'Runtime'))
# Removing rows where value is 0 to answer the question
# This is because when value is 0, that means movie is not that genre.
df3.long = df3.long[apply(df3.long['value'],1,function(z) !any(z==0)),]
print(summary(df3.long))
print(head(df3.long))
# Finally plot relative proportions
# https://sebastiansauer.github.io/percentage_plot_ggplot2_V2/
ggplot(df3.long, aes(x=variable)) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
ylab('Relative Proportion')
ggplot(df3.long, aes(as.factor(variable), Runtime)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Genre")
library(lubridate)  # Used to extract year from Released
cols4 = c('Year', 'Date', 'Released', 'Gross')
df4 = df[cols4]
df4$released_year = year(df4$Released)
df4$not_matched = (df4$Year != df4$released_year)
# Number of rows with non-null Gross Value
print(nrow(df[which(!is.na(df$Gross)), ]))
# Printing rows in the original data set
print(nrow(df))
df = df[-which(df4$not_matched == TRUE & is.na(df4$Gross)), ]
print(nrow(df))
```
**Q**: What is your precise removal logic, and how many rows remain in the resulting dataset?
df$runtime_categorical = ifelse(df$Runtime <= 68, 'short', ifelse(df$Runtime <= 101, 'medium', 'long'))
cols = c('Title', 'Gross', 'Runtime', 'runtime_categorical', 'Budget', 'Released', 'Action', 'Adult', 'Adventure', 'Animation', 'Biography', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Family', 'Fantasy', 'Film-Noir', 'Game-Show', 'History', 'Horror', 'Music', 'Musical', 'Mystery', 'N/A', 'News', 'Reality-TV', 'Romance', 'Sci-Fi', 'Short', 'Sport', 'Talk-Show', 'Thriller', 'War', 'Western')
df5 = df[cols]
print(summary(df5))
print(head(df5))
ggplot(df, aes(Runtime, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(Budget, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
# Next melt the df to get genre as one column (like in question 3) and plot grouped by genre
df5.long = melt(df5, id.vars=c('Title', 'Gross', 'Runtime', 'runtime_categorical', 'Budget', 'Released'), variable.name='genre')
# Removing rows where value is 0 to answer the question
# This is because when value is 0, that means movie is not that genre.
df5.long = df5.long[apply(df5.long['value'], 1, function(z) !any(z==0)),]
ggplot(df5.long[df5.long$runtime_categorical=='short', ], aes(as.factor(genre), Gross)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Genre")
df$runtime_categorical = ifelse(df$Runtime <= 68, 'short', ifelse(df$Runtime <= 101, 'medium', 'long'))
cols = c('Title', 'Gross', 'Runtime', 'runtime_categorical', 'Budget')
cols = c(cols, topTenGenres)
df5 = df[cols]
print(summary(df5))
print(head(df5))
ggplot(df, aes(Runtime, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(Budget, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
# Next melt the df to get genre as one column (like in question 3) and plot grouped by genre
df5.long = melt(df5, id.vars=c('Title', 'Gross', 'Runtime', 'runtime_categorical', 'Budget', 'Released'), variable.name='genre')
# Removing rows where value is 0 to answer the question
# This is because when value is 0, that means movie is not that genre.
df5.long = df5.long[apply(df5.long['value'], 1, function(z) !any(z==0)),]
ggplot(df5.long[df5.long$runtime_categorical=='short', ], aes(as.factor(genre), Gross)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Genre")
df5.long = melt(df5, id.vars=c('Title', 'Gross', 'Runtime', 'runtime_categorical', 'Budget'), variable.name='genre')
# Removing rows where value is 0 to answer the question
# This is because when value is 0, that means movie is not that genre.
df5.long = df5.long[apply(df5.long['value'], 1, function(z) !any(z==0)),]
ggplot(df5.long[df5.long$runtime_categorical=='short', ], aes(as.factor(genre), Gross)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Genre")
ggtitle('Short Running Movies')
ggplot(df5.long[df5.long$runtime_categorical=='short', ], aes(as.factor(genre), Gross)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Genre") +
ggtitle('Short Running Movies')
ggplot(df5.long[df5.long$runtime_categorical=='long', ], aes(as.factor(genre), Gross)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Genre") +
ggtitle('Long Running Movies')
ggplot(df5.long[df5.long$runtime_categorical=='long', ], aes(as.factor(genre), Budget)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Budget") +
ggtitle('Long Running Movies')
View(df5.long)
ggplot(df, aes(Runtime, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df5, aes(as.factor(runtime_categorical), Gross)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Runtime") +
ggtitle('Distribution of Gross by Runtime')
ggplot(df, aes(Runtime, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df5, aes(runtime_categorical, Gross)) +
geom_bar(stat='summary', fill.y='mean')
ggplot(df, aes(Runtime, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
print(summary(df5))
print(head(df5))
ggplot(df5, aes(runtime_categorical, Gross)) +
geom_bar(stat='summary', fill.y='mean')
ggplot(df5, aes(as.factor(runtime_categorical), Gross)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Runtime") +
ggtitle('Distribution of Gross by Runtime')
ggplot(df, aes(Runtime, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df5, aes(as.factor(runtime_categorical), Gross)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Runtime") +
ggtitle('Distribution of Gross by Runtime')
ggplot(df, aes(Budget, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
cols = c('Title', 'Gross', 'Runtime', 'runtime_categorical', 'Budget', 'budget_rounded')
cols = c(cols, topTenGenres)
df5 = df[cols]
ggplot(df, aes(Budget, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df5, aes(as.factor(budget_rounded), Gross)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Budget Rounded") +
ggtitle('Distribution of Gross by Budget')
ggplot(df, aes(Budget, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
# Next melt the df to get genre as one column (like in question 3) and plot grouped by genre
df5.long = melt(df5, id.vars=c('Title', 'Gross', 'Runtime', 'runtime_categorical', 'Budget'), variable.name='genre')
# Removing rows where value is 0 to answer the question
# This is because when value is 0, that means movie is not that genre.
df5.long = df5.long[apply(df5.long['value'], 1, function(z) !any(z==0)),]
ggplot(df5.long, aes(as.factor(genre), Gross)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Genre")
ggplot(df5.long, aes(as.factor(genre), Gross)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Genre")
ggplot(df5.long, aes(genre, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df5.long, aes(genre, Gross)) +
geom_bar(stat='summary', fill.y='mean')
df5.long = melt(df5, id.vars=c('Title', 'Gross', 'Runtime', 'runtime_categorical', 'Budget', 'budget_rounded'), variable.name='genre')
# Removing rows where value is 0 to answer the question
# This is because when value is 0, that means movie is not that genre.
df5.long = df5.long[apply(df5.long['value'], 1, function(z) !any(z==0)),]
ggplot(df5.long, aes(as.factor(genre), Gross)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("Genre")
ggplot(df5.long, aes(genre, Gross)) +
geom_bar(stat='summary', fill.y='mean')
max(df$Awards)
df[df$Awards == max(df$Awards)]
df[df$Awards == max(df$Awards), ]
# TODO: Convert Awards to 2 numeric columns: wins and nominations
library(stringi)
cols = c('Title', 'Awards', 'Gross')
df6 = df[cols]
print(summary(df6))
print(head(df6))
awards = stri_extract_all(df6$Awards, regex="\\d+")
award_labels = stri_extract_all(df6$Awards, regex="win|won|nomin")
print(head(awards))
print(head(award_labels))
wins_list = c()
nominations_list = c()
for (i in 1:length(awards)){
wins = 0
nominations = 0
for(j in 1:length(awards[[i]])){
if(!is.na(award_labels[[i]][j]) & (award_labels[[i]][j] == 'wins' | award_labels[[i]][j] == 'win' | award_labels[[i]][j] == 'won')){
wins = wins + as.numeric(awards[[i]][j])
} else if (!is.na(award_labels[[i]][j]) & award_labels[[i]][j] == 'nomin'){
nominations = nominations + as.numeric(awards[[i]][j])
}
}
wins_list = c(wins_list, wins)
nominations_list = c(nominations_list, nominations)
}
df$wins = wins_list
df$nominations = nominations_list
print(head(df[c('Awards', 'wins', 'nominations')], 20))
df[df$Awards == max(df$Awards), ]
max(df$Awards)
# TODO: Convert Awards to 2 numeric columns: wins and nominations
library(stringi)
cols = c('Title', 'Awards', 'Gross')
df6 = df[cols]
print(summary(df6))
print(head(df6))
awards = stri_extract_all(df6$Awards, regex="\\d+")
award_labels = stri_extract_all(df6$Awards, regex="win|won|wins|nomin")
print(head(awards))
print(head(award_labels))
wins_list = c()
nominations_list = c()
for (i in 1:length(awards)){
wins = 0
nominations = 0
for(j in 1:length(awards[[i]])){
if(!is.na(award_labels[[i]][j]) & (award_labels[[i]][j] == 'wins' | award_labels[[i]][j] == 'win' | award_labels[[i]][j] == 'won')){
wins = wins + as.numeric(awards[[i]][j])
} else if (!is.na(award_labels[[i]][j]) & award_labels[[i]][j] == 'nomin'){
nominations = nominations + as.numeric(awards[[i]][j])
}
}
wins_list = c(wins_list, wins)
nominations_list = c(nominations_list, nominations)
}
df$wins = wins_list
df$nominations = nominations_list
print(head(df[c('Awards', 'wins', 'nominations')], 20))
df[df$Awards == max(df$Awards), ]
df[df$Awards == max(df$Awards), ]
award_labels
award_labels(max(df$Awards))
award_labels[max(df$Awards)]
award_labels[[max(df$Awards)]]
max(df$Awards)
award_labels[[df$Awards == max(df$Awards)]]
award_labels[[which(df$Awards == max(df$Awards))]]
max(df$Awards)
?stri_extract_all
award_labels = stri_extract_all(df6$Awards, regex="win|won|wins|nomin", ignore.case=TRUE)
print(head(awards))
print(head(award_labels))
# TODO: Convert Awards to 2 numeric columns: wins and nominations
library(stringi)
cols = c('Title', 'Awards', 'Gross')
df6 = df[cols]
print(summary(df6))
print(head(df6))
awards = stri_extract_all(df6$Awards, regex="\\d+")
award_labels = stri_extract_all(df6$Awards, regex="win|won|wins|nomin", ignore.case=TRUE)
print(head(awards))
print(head(award_labels))
wins_list = c()
nominations_list = c()
for (i in 1:length(awards)){
wins = 0
nominations = 0
for(j in 1:length(awards[[i]])){
if(!is.na(award_labels[[i]][j]) & (award_labels[[i]][j] == 'wins' | award_labels[[i]][j] == 'win' | award_labels[[i]][j] == 'won')){
wins = wins + as.numeric(awards[[i]][j])
} else if (!is.na(award_labels[[i]][j]) & award_labels[[i]][j] == 'nomin'){
nominations = nominations + as.numeric(awards[[i]][j])
}
}
wins_list = c(wins_list, wins)
nominations_list = c(nominations_list, nominations)
}
df$wins = wins_list
df$nominations = nominations_list
print(head(df[c('Awards', 'wins', 'nominations')], 20))
award_labels[[which(df$Awards == max(df$Awards))]]
print(head(df[c('Awards', 'wins', 'nominations')], 100))
award_labels[[75]]
award_labels[[74]]
award_labels[[76]]
award_labels[[77]]
View(df)
df$award_labels = award_labels
View(df)
tolower(df$Awards)
# TODO: Convert Awards to 2 numeric columns: wins and nominations
library(stringi)
cols = c('Title', 'Awards', 'Gross')
df6 = df[cols]
print(summary(df6))
print(head(df6))
awards = stri_extract_all(df6$Awards, regex="\\d+")
award_labels = stri_extract_all(tolower(df6$Awards), regex="win|won|wins|nomin", ignore.case=TRUE)
print(head(awards))
print(head(award_labels))
wins_list = c()
nominations_list = c()
for (i in 1:length(awards)){
wins = 0
nominations = 0
for(j in 1:length(awards[[i]])){
if(!is.na(award_labels[[i]][j]) & (award_labels[[i]][j] == 'wins' | award_labels[[i]][j] == 'win' | award_labels[[i]][j] == 'won')){
wins = wins + as.numeric(awards[[i]][j])
} else if (!is.na(award_labels[[i]][j]) & award_labels[[i]][j] == 'nomin'){
nominations = nominations + as.numeric(awards[[i]][j])
}
}
wins_list = c(wins_list, wins)
nominations_list = c(nominations_list, nominations)
}
df$wins = wins_list
df$nominations = nominations_list
print(head(df[c('Awards', 'wins', 'nominations')], 100))
ggplot(df, aes(wins, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(nominations, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(wins, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
max(df$wins)
df[df$wins == max(df$wins), ]
ggpairs(df, columns=c('Gross', 'wins', 'nominations'))
sum(ifelse(df$wins==0, 1, 0))
sum(ifelse(df$wins==1, 1, 0))
sum(ifelse(df$wins==1, 1, 0))
sum(ifelse(df$nominations==1, 1, 0))
View(df)
ggplot(df, aes(wins, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggpairs(df, columns=c('Gross', 'wins', 'nominations'))
ggpairs(df, columns=c('Gross', 'wins', 'nominations'))
ggplot(df, aes(wins, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggplot(df, aes(nominations, Gross)) +
stat_summary(fun.y = "mean", colour = "red", size = 2, geom = "point")
ggpairs(df, columns=c('Runtime', 'Budget', 'Year'))
