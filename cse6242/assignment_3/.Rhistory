labels = sign(theta %*% data)
return(as.vector(labels, mode='numeric'))
}
# Setting alpha constant
alpha = 0.01
theta_0_1 = train(data=train_0_1_w_bias, labels=train_labels_0_1, alpha=alpha)
training_pred_0_1 = predict(theta_0_1, data=train_0_1_w_bias)
theta_3_5 = train(data=train_3_5_w_bias, labels=train_labels_3_5, alpha=alpha)
training_pred_3_5 = predict(theta_3_5, data=train_3_5_w_bias)
table(training_pred_0_1, train_labels_0_1)
table(training_pred_3_5, train_labels_3_5)
correct_0_1_a = which(training_pred_0_1 == train_labels_0_1)[1]
correct_0_1_b = which(training_pred_0_1 == train_labels_0_1)[2]
correct_3_5_a = which(training_pred_3_5 == train_labels_3_5)[1]
correct_3_5_b = which(training_pred_3_5 == train_labels_3_5)[2]
correct_0_1_a_matrix = matrix(train_0_1[, correct_0_1_a], nrow=28, ncol=28)
correct_0_1_b_matrix = matrix(train_0_1[, correct_0_1_b], nrow=28, ncol=28)
correct_3_5_a_matrix = matrix(train_3_5[, correct_3_5_a], nrow=28, ncol=28)
correct_3_5_b_matrix = matrix(train_3_5[, correct_3_5_b], nrow=28, ncol=28)
image(rotate(correct_0_1_a_matrix), main=paste('True Label = ', train_labels_0_1_orig[correct_0_1_a], 'Predicted Label = ', training_pred_0_1[correct_0_1_a]))
image(rotate(correct_0_1_b_matrix), main=paste('True Label = ', train_labels_0_1_orig[correct_0_1_b], 'Predicted Label = ', training_pred_0_1[correct_0_1_b]))
image(rotate(correct_3_5_a_matrix), main=paste('True Label = ', train_labels_3_5_orig[correct_3_5_a], 'Predicted Label = ', training_pred_3_5[correct_3_5_a]))
image(rotate(correct_3_5_b_matrix), main=paste('True Label = ', train_labels_3_5_orig[correct_3_5_b], 'Predicted Label = ', training_pred_3_5[correct_3_5_b]))
image(rotate(correct_3_5_b_matrix), main=paste('True Label = ', train_labels_3_5_orig[correct_3_5_b], 'Predicted Label = ', mapvalues(training_pred_3_5[correct_3_5_b], from=c(-1, 1), to=c(3, 5), warn_missing=FALSE)))
image(rotate(correct_3_5_a_matrix), main=paste('True Label = ', train_labels_3_5_orig[correct_3_5_a], 'Predicted Label = ', mapvalues(training_pred_3_5[correct_3_5_a], from=c(-1, 1), to=c(3, 5), warn_missing=FALSE)))
correct_0_1_a = which(training_pred_0_1 == train_labels_0_1 & training_pred_0_1 == 1)[1]
correct_0_1_a = which(training_pred_0_1 == train_labels_0_1 & training_pred_0_1 == 1)[1]
correct_0_1_a_matrix = matrix(train_0_1[, correct_0_1_a], nrow=28, ncol=28)
image(rotate(correct_0_1_a_matrix), main=paste('True Label = ', 1, 'Predicted Label = ', 1))
image(rotate(correct_0_1_b_matrix), main=paste('True Label = ', 0, 'Predicted Label = ', 0))
correct_3_5_a = which(training_pred_3_5 == train_labels_3_5 & training_pred_3_5 == 3)[1]
image(rotate(correct_3_5_a_matrix), main=paste('True Label = ', 3, 'Predicted Label = ', 3))
image(rotate(correct_3_5_b_matrix), main=paste('True Label = ', 5, 'Predicted Label = ', 5))
correct_3_5_b_matrix = matrix(train_3_5[, correct_3_5_b], nrow=28, ncol=28)
image(rotate(correct_3_5_b_matrix), main=paste('True Label = ', 5, 'Predicted Label = ', 5))
correct_3_5_b = which(training_pred_3_5 == train_labels_3_5 & training_pred_3_5 == 5)[2]
correct_3_5_b_matrix = matrix(train_3_5[, correct_3_5_b], nrow=28, ncol=28)
correct_3_5_a = which(training_pred_3_5 == train_labels_3_5 & training_pred_3_5 == -1)[1]
correct_3_5_b = which(training_pred_3_5 == train_labels_3_5 & training_pred_3_5 == 1)[2]
correct_3_5_a_matrix = matrix(train_3_5[, correct_3_5_a], nrow=28, ncol=28)
correct_3_5_b_matrix = matrix(train_3_5[, correct_3_5_b], nrow=28, ncol=28)
image(rotate(correct_3_5_a_matrix), main=paste('True Label = ', 3, 'Predicted Label = ', 3))
image(rotate(correct_3_5_b_matrix), main=paste('True Label = ', 5, 'Predicted Label = ', 5))
incorrect_0_1_a = which(training_pred_0_1 != train_labels_0_1 & training_pred_0_1 == -1)[1]
incorrect_0_1_b = which(training_pred_0_1 != train_labels_0_1 & training_pred_0_1 == 1)[2]
incorrect_3_5_a = which(training_pred_3_5 != train_labels_3_5 & training_pred_3_5 == -1)[1]
incorrect_3_5_b = which(training_pred_3_5 != train_labels_3_5 & training_pred_3_5 == 1)[2]
incorrect_0_1_a_matrix = matrix(train_0_1[, incorrect_0_1_a], nrow=28, ncol=28)
incorrect_0_1_b_matrix = matrix(train_0_1[, incorrect_0_1_b], nrow=28, ncol=28)
incorrect_3_5_a_matrix = matrix(train_3_5[, incorrect_3_5_a], nrow=28, ncol=28)
incorrect_3_5_b_matrix = matrix(train_3_5[, incorrect_3_5_b], nrow=28, ncol=28)
image(rotate(incorrect_0_1_a_matrix), main=paste('True Label = ', 1, 'Predicted Label = ', 0)
image(rotate(incorrect_0_1_a_matrix), main=paste('True Label = ', 1, 'Predicted Label = ', 0))
image(rotate(incorrect_0_1_a_matrix), main=paste('True Label = ', 1, 'Predicted Label = ', 0))
image(rotate(incorrect_0_1_b_matrix), main=paste('True Label = ', 0, 'Predicted Label = ', 1)
)
image(rotate(incorrect_0_1_b_matrix), main=paste('True Label = ', 0, 'Predicted Label = ', 1))
image(rotate(incorrect_3_5_a_matrix), main=paste('True Label = ', 5, 'Predicted Label = ', 3))
image(rotate(incorrect_3_5_b_matrix), main=paste('True Label = ', 3, 'Predicted Label = ', 5))
accuracy = function(labels, labels_pred){
# Compute the prediction accuracy
# Keyword args:
#   labels: vector containing the true labels (y(i))
#   labels_pred: vector containing predicted labels (\hat{y}^(i))
# Returns:
#   acc: fraction of predicted labels that match true labels, as a number between 0 and 1
tab = as.matrix(table(labels, labels_pred))
true_negatives = tryCatch(tab[1, 1], error = function(e) 0)
true_positives = tryCatch(tab[2, 2], error = function(e) 0)
return((true_positives + true_negatives)/sum(tab))
}
model = function(train_data, train_labels, test_data, test_labels, alpha){
# Train and evaluate a model.
# Keyword args:
#   train_data, train_labels: samples to be used for training, and for computing training accuracy
#   test_data, test_samples: unseen samples for computing test accuracy
#   alpha: learning rate hyperparameter for training
# Returns:
#   theta: learned model parameters
#   train_acc: prediction accuracy on training data
#   test_acc: prediction accuracy on test data
theta = train(data=train_data, labels=train_labels, alpha=alpha)
train_pred = predict(theta=theta, data=train_data)
test_pred = predict(theta=theta, data=test_data)
train_acc = accuracy(train_labels, train_pred)
test_acc = accuracy(test_labels, test_pred)
return(list('theta'=theta, 'train_acc'=train_acc, 'test_acc'=test_acc))
}
model_0_1 = model(train_data=train_0_1_w_bias,
train_labels=train_labels_0_1,
test_data=test_0_1_w_bias,
test_labels=test_labels_0_1,
alpha=alpha)
model_3_5 = model(train_data=train_3_5_w_bias,
train_labels=train_labels_3_5,
test_data=test_3_5_w_bias,
test_labels=test_labels_3_5,
alpha=alpha)
print(paste('with alpha equal to', alpha, 'the training accuracy of model of 0/1 set is', model_0_1$train_acc, 'and the test accuracy of mode of 0/1 set is', model_0_1$test_acc))
print(paste('with alpha equal to', alpha, 'the training accuracy of model of 3/5 set is', model_3_5$train_acc, 'and the test accuracy of mode of 3/5 set is', model_3_5$test_acc))
# Now vary alpha
alphas = c(0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10)
models_0_1 = c()
models_3_5 = c()
train_accs_0_1 = c()
train_accs_3_5 = c()
test_accs_0_1 = c()
test_accs_3_5 = c()
for(alpha in alphas){
model_0_1 = model(train_data=train_0_1_w_bias,
train_labels=train_labels_0_1,
test_data=test_0_1_w_bias,
test_labels=test_labels_0_1,
alpha=alpha)
models_0_1 = c(models_0_1, model_0_1)
model_3_5 = model(train_data=train_3_5_w_bias,
train_labels=train_labels_3_5,
test_data=test_3_5_w_bias,
test_labels=test_labels_3_5,
alpha=alpha)
models_3_5 = c(models_3_5, model_3_5)
train_accs_0_1 = c(train_accs_0_1, model_0_1$train_acc)
train_accs_3_5 = c(train_accs_3_5, model_3_5$train_acc)
test_accs_0_1 = c(test_accs_0_1, model_0_1$test_acc)
test_accs_3_5 = c(test_accs_3_5, model_3_5$test_acc)
}
accuracy_type = c(rep('train', length(alphas)), rep('test', length(alphas)))
accuracy_0_1 = c(train_accs_0_1, test_accs_0_1)
accuracy_3_5 = c(train_accs_3_5, test_accs_3_5)
df_0_1 = data.frame(alphas=alphas, accuracy_type=accuracy_type, accuracy=accuracy_0_1)
df_3_5 = data.frame(alphas=alphas, accuracy_type=accuracy_type, accuracy=accuracy_3_5)
# Plotting scatter plot accuracy
ggplot(df_0_1, aes(x=alphas, y=accuracy)) +
geom_point(aes(color=accuracy_type, group=accuracy_type)) +
ggtitle('Training and Test Accuracy over 0/1 Model')
ggplot(df_3_5, aes(x=alphas, y=accuracy)) +
geom_point(aes(color=accuracy_type, group=accuracy_type)) +
ggtitle('Training and Test Accuracy over 3/5 Model')
print(paste('with alpha equal to', alpha, 'the training accuracy of model of 0/1 set is', model_0_1$train_acc, 'and the test accuracy of mode of 0/1 set is', model_0_1$test_acc))
print(paste('with alpha equal to', alpha, 'the training accuracy of model of 3/5 set is', model_3_5$train_acc, 'and the test accuracy of mode of 3/5 set is', model_3_5$test_acc))
print_confusion_matrix = function(labels, labels_pred){
# Print the confusion matrix
# Keyword args:
#   labels: vector containing the true labels (y(i))
#   labels_pred: vector containing predicted labels (\hat{y}^(i))
tab = as.matrix(table(labels, labels_pred))
print(tab)
}
accuracy = function(labels, labels_pred){
# Compute the prediction accuracy
# Keyword args:
#   labels: vector containing the true labels (y(i))
#   labels_pred: vector containing predicted labels (\hat{y}^(i))
# Returns:
#   acc: fraction of predicted labels that match true labels, as a number between 0 and 1
tab = as.matrix(table(labels, labels_pred))
true_negatives = tryCatch(tab[1, 1], error = function(e) 0)
true_positives = tryCatch(tab[2, 2], error = function(e) 0)
return((true_positives + true_negatives)/sum(tab))
}
model = function(train_data, train_labels, test_data, test_labels, alpha){
# Train and evaluate a model.
# Keyword args:
#   train_data, train_labels: samples to be used for training, and for computing training accuracy
#   test_data, test_samples: unseen samples for computing test accuracy
#   alpha: learning rate hyperparameter for training
# Returns:
#   theta: learned model parameters
#   train_acc: prediction accuracy on training data
#   test_acc: prediction accuracy on test data
#   train_pred: vector of predictions on training data
#   test_pred: vector of predictions on test data
theta = train(data=train_data, labels=train_labels, alpha=alpha)
train_pred = predict(theta=theta, data=train_data)
test_pred = predict(theta=theta, data=test_data)
train_acc = accuracy(train_labels, train_pred)
test_acc = accuracy(test_labels, test_pred)
return(list('theta'=theta,
'train_acc'=train_acc,
'test_acc'=test_acc,
'train_pred'=train_pred,
'test_pred'=test_pred))
}
```
```{r modeling-evaluate}
# Setting seed to 1 to ensure reproducible results
set.seed(1)
model_0_1 = model(train_data=train_0_1_w_bias,
train_labels=train_labels_0_1,
test_data=test_0_1_w_bias,
test_labels=test_labels_0_1,
alpha=alpha)
model_3_5 = model(train_data=train_3_5_w_bias,
train_labels=train_labels_3_5,
test_data=test_3_5_w_bias,
test_labels=test_labels_3_5,
alpha=alpha)
print('printing confusion matrices')
print('Training over 0/1')
print_confusion_matrix(train_labels_0_1, model_0_1$train_pred)
print('Training over 3/5')
print_confusion_matrix(train_labels_3_5, model_3_5$train_pred)
print('Test over 0/1')
print_confusion_matrix(test_labels_0_1, model_0_1$test_pred)
print('Test over 3/5')
print_confusion_matrix(test_labels_3_5, model_3_5$test_pred)
print_confusion_matrix = function(labels, labels_pred){
# Print the confusion matrix
# Keyword args:
#   labels: vector containing the true labels (y(i))
#   labels_pred: vector containing predicted labels (\hat{y}^(i))
tab = as.matrix(table(labels, labels_pred))
print(tab)
}
accuracy = function(labels, labels_pred){
# Compute the prediction accuracy
# Keyword args:
#   labels: vector containing the true labels (y(i))
#   labels_pred: vector containing predicted labels (\hat{y}^(i))
# Returns:
#   acc: fraction of predicted labels that match true labels, as a number between 0 and 1
tab = as.matrix(table(labels, labels_pred))
true_negatives = tryCatch(tab[1, 1], error = function(e) 0)
true_positives = tryCatch(tab[2, 2], error = function(e) 0)
return((true_positives + true_negatives)/sum(tab))
}
model = function(train_data, train_labels, test_data, test_labels, alpha){
# Train and evaluate a model.
# Keyword args:
#   train_data, train_labels: samples to be used for training, and for computing training accuracy
#   test_data, test_samples: unseen samples for computing test accuracy
#   alpha: learning rate hyperparameter for training
# Returns:
#   theta: learned model parameters
#   train_acc: prediction accuracy on training data
#   test_acc: prediction accuracy on test data
#   train_pred: vector of predictions on training data
#   test_pred: vector of predictions on test data
theta = train(data=train_data, labels=train_labels, alpha=alpha)
train_pred = predict(theta=theta, data=train_data)
test_pred = predict(theta=theta, data=test_data)
train_acc = accuracy(train_labels, train_pred)
test_acc = accuracy(test_labels, test_pred)
return(list('theta'=theta,
'train_acc'=train_acc,
'test_acc'=test_acc,
'train_pred'=train_pred,
'test_pred'=test_pred))
}
set.seed(1)
model_0_1 = model(train_data=train_0_1_w_bias,
train_labels=train_labels_0_1,
test_data=test_0_1_w_bias,
test_labels=test_labels_0_1,
alpha=alpha)
model_3_5 = model(train_data=train_3_5_w_bias,
train_labels=train_labels_3_5,
test_data=test_3_5_w_bias,
test_labels=test_labels_3_5,
alpha=alpha)
print('printing confusion matrices')
print('Training over 0/1')
print_confusion_matrix(train_labels_0_1, model_0_1$train_pred)
print('Training over 3/5')
print_confusion_matrix(train_labels_3_5, model_3_5$train_pred)
print('Test over 0/1')
print_confusion_matrix(test_labels_0_1, model_0_1$test_pred)
print('Test over 3/5')
print_confusion_matrix(test_labels_3_5, model_3_5$test_pred)
train = function(data, labels, alpha){
# Train a Logistic Regression model
# Keyword args:
#   data: matrix or dataframe containing the input features (x^(i))
#   labels: vector containing the corresponding labels (y^(i))
#   alpha: learning rate hyperparameter
# Returns:
#   theta: vector of model parameters (theta) that minimizes the logistic regression loss L(theta)
d = nrow(data)
n = ncol(data)
epochs = 100  # Total number of epochs, arbitrarily set to 100 for now
# 1. Initialize theta_j to random values
theta = runif(d, -0.5, 0.5)
e = 1
while(e <= epochs){
# For each epoch shuffle the data
print(e)
shuffled_idx = sample(n, replace=FALSE)
number_iterations = 0
prev_theta = theta
for(i in shuffled_idx){
# 2. Pick one labeled data vector. This works because we earlier shuffled the data
x_i = data[, i]
y_i = labels[i]
# 3. Apply update rule
numerator = x_i * y_i
denominator = 1 + exp(sum(theta * x_i) * y_i)
update = numerator / denominator
theta = theta + alpha * update
number_iterations = number_iterations + 1
if (sum(abs(alpha * (numerator/denominator))) < 0.000001){
return(theta)
}
}
e = e + 1
}
# If algorithm has not yet converged after epoch limit, return theta anyway
print("i never converged!")
return(theta)
}
x = 1
x += 2
alphas = c(0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10)
num_runs = 10
train_accs_0_1 = c()
train_accs_3_5 = c()
test_accs_0_1 = c()
test_accs_3_5 = c()
for(alpha in alphas){
train_acc_0_1 = 0
train_acc_3_5 = 0
test_acc_0_1 = 0
test_acc_3_5 = 0
for(i in 1:num_runs){
model_0_1 = model(train_data=train_0_1_w_bias,
train_labels=train_labels_0_1,
test_data=test_0_1_w_bias,
test_labels=test_labels_0_1,
alpha=alpha)
model_3_5 = model(train_data=train_3_5_w_bias,
train_labels=train_labels_3_5,
test_data=test_3_5_w_bias,
test_labels=test_labels_3_5,
alpha=alpha)
train_acc_0_1 = train_acc_0_1 + model_0_1$train_acc
train_acc_3_5 = train_acc_3_5 + model_3_5$train_acc
test_acc_0_1 = test_acc_0_1 + model_0_1$test_acc
test_acc_3_5 = test_acc_3_5 + model_3_5$test_acc
}
# Take the average
train_acc_0_1 = train_acc_0_1 / num_runs
train_acc_3_5 = train_acc_3_5 / num_runs
test_acc_0_1 = test_acc_0_1 / num_runs
test_acc_3_5 = test_acc_3_5 / num_runs
train_accs_0_1 = c(train_accs_0_1, train_acc_0_1)
train_accs_3_5 = c(train_accs_3_5, train_acc_3_5)
test_accs_0_1 = c(test_accs_0_1, test_acc_0_1)
test_accs_3_5 = c(test_accs_3_5, test_acc_3_5)
}
accuracy_type = c(rep('train', length(alphas)), rep('test', length(alphas)))
accuracy_0_1 = c(train_accs_0_1, test_accs_0_1)
accuracy_3_5 = c(train_accs_3_5, test_accs_3_5)
df_0_1 = data.frame(alphas=alphas, accuracy_type=accuracy_type, accuracy=accuracy_0_1)
df_3_5 = data.frame(alphas=alphas, accuracy_type=accuracy_type, accuracy=accuracy_3_5)
# Plotting scatter plot accuracy
ggplot(df_0_1, aes(x=alphas, y=accuracy)) +
geom_point(aes(color=accuracy_type, group=accuracy_type)) +
ggtitle('Training and Test Accuracy over 0/1 Model')
ggplot(df_3_5, aes(x=alphas, y=accuracy)) +
geom_point(aes(color=accuracy_type, group=accuracy_type)) +
ggtitle('Training and Test Accuracy over 3/5 Model')
ggplot(df_0_1, aes(x=alphas, y=accuracy)) +
geom_line(aes(color=accuracy_type, group=accuracy_type)) +
ggtitle('Training and Test Accuracy over 0/1 Model')
ggplot(df_3_5, aes(x=alphas, y=accuracy)) +
geom_line(aes(color=accuracy_type, group=accuracy_type)) +
ggtitle('Training and Test Accuracy over 3/5 Model')
alphas = c(0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10)
num_runs = 10
train_accs_0_1 = c()
train_accs_3_5 = c()
test_accs_0_1 = c()
test_accs_3_5 = c()
for(alpha in alphas){
train_acc_0_1 = 0
train_acc_3_5 = 0
test_acc_0_1 = 0
test_acc_3_5 = 0
for(i in 1:num_runs){
model_0_1 = model(train_data=train_0_1_w_bias,
train_labels=train_labels_0_1,
test_data=test_0_1_w_bias,
test_labels=test_labels_0_1,
alpha=alpha)
model_3_5 = model(train_data=train_3_5_w_bias,
train_labels=train_labels_3_5,
test_data=test_3_5_w_bias,
test_labels=test_labels_3_5,
alpha=alpha)
train_acc_0_1 = train_acc_0_1 + model_0_1$train_acc
train_acc_3_5 = train_acc_3_5 + model_3_5$train_acc
test_acc_0_1 = test_acc_0_1 + model_0_1$test_acc
test_acc_3_5 = test_acc_3_5 + model_3_5$test_acc
}
# Take the average
train_acc_0_1 = train_acc_0_1 / num_runs
train_acc_3_5 = train_acc_3_5 / num_runs
test_acc_0_1 = test_acc_0_1 / num_runs
test_acc_3_5 = test_acc_3_5 / num_runs
train_accs_0_1 = c(train_accs_0_1, train_acc_0_1)
train_accs_3_5 = c(train_accs_3_5, train_acc_3_5)
test_accs_0_1 = c(test_accs_0_1, test_acc_0_1)
test_accs_3_5 = c(test_accs_3_5, test_acc_3_5)
}
accuracy_type = c(rep('train', length(alphas)), rep('test', length(alphas)))
accuracy_0_1 = c(train_accs_0_1, test_accs_0_1)
accuracy_3_5 = c(train_accs_3_5, test_accs_3_5)
df_0_1 = data.frame(alphas=alphas, accuracy_type=accuracy_type, accuracy=accuracy_0_1)
df_3_5 = data.frame(alphas=alphas, accuracy_type=accuracy_type, accuracy=accuracy_3_5)
# Plotting scatter plot accuracy
ggplot(df_0_1, aes(x=alphas, y=accuracy)) +
geom_line(aes(color=accuracy_type, group=accuracy_type)) +
ggtitle('Training and Test Accuracy over 0/1 Model')
ggplot(df_3_5, aes(x=alphas, y=accuracy)) +
geom_line(aes(color=accuracy_type, group=accuracy_type)) +
ggtitle('Training and Test Accuracy over 3/5 Model')
ggplot(df_0_1, aes(x=alphas, y=accuracy)) +
geom_line(aes(color=accuracy_type, group=accuracy_type)) +
ggtitle('Training and Test Accuracy over 0/1 Model')
ggplot(df_3_5, aes(x=alphas, y=accuracy)) +
geom_line(aes(color=accuracy_type, group=accuracy_type)) +
ggtitle('Training and Test Accuracy over 3/5 Model')
View(df_0_1)
df_0_1[df_0_1$accuracy_type='test', 'accuracy']
df_0_1[df_0_1$accuracy_type=='test', 'accuracy']
max(df_0_1[df_0_1$accuracy_type=='test', 'accuracy'])
which(max(df_0_1[df_0_1$accuracy_type=='test', 'accuracy']))
which.max(df_0_1[df_0_1$accuracy_type=='test', 'accuracy'])
alphas[3]
df_0_1
max_test_0_1 = df_0_1[df_0_1$accuracy_type=='test', 'accuracy']
alpha_max_test_0_1 = alphas[which.max(max_test_0_1)]
max_test_0_1
max_test_0_1 = max(df_0_1[df_0_1$accuracy_type=='test', 'accuracy'])
alpha_max_test_0_1 = alphas[which.max(max_test_0_1)]
max_test_0_1 = max(df_0_1[df_0_1$accuracy_type=='test', 'accuracy'])
alpha_max_test_0_1 = alphas[which.max(df_0_1[df_0_1$accuracy_type=='test', 'accuracy'])]
max_test_0_1 = max(test_accs_0_1)
alpha_max_test_0_1 = alphas[which.max(test_accs_0_1]
alpha_max_test_0_1 = alphas[which.max(test_accs_0_1)]
alpha_max_test_0_1
max_test_0_1 = max(test_accs_0_1)
alpha_max_test_0_1 = alphas[which.max(test_accs_0_1)]
max_test_3_5 = max(test_accs_3_5)
alpha_max_test_3_5 = alphas[which.max(test_accs_3_5)]
sizes = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)
alpha = 0.1
num_runs = 10
train_accs_0_1 = c()
train_accs_3_5 = c()
test_accs_0_1 = c()
test_accs_3_5 = c()
for(size in sizes){
train_acc_0_1 = 0
train_acc_3_5 = 0
test_acc_0_1 = 0
test_acc_3_5 = 0
for(i in 1:num_runs){
data_idx_0_1 = sample(ncol(train_0_1_w_bias) * size)
data_idx_3_5 = sample(ncol(train_3_5_w_bias) * size)
model_0_1 = model(train_data=train_0_1_w_bias[, data_idx_0_1],
train_labels=train_labels_0_1[data_idx_0_1],
test_data=test_0_1_w_bias,
test_labels=test_labels_0_1,
alpha=alpha)
model_3_5 = model(train_data=train_3_5_w_bias[, data_idx_3_5],
train_labels=train_labels_3_5[data_idx_3_5],
test_data=test_3_5_w_bias,
test_labels=test_labels_3_5,
alpha=alpha)
train_acc_0_1 = train_acc_0_1 + model_0_1$train_acc
train_acc_3_5 = train_acc_3_5 + model_3_5$train_acc
test_acc_0_1 = test_acc_0_1 + model_0_1$test_acc
test_acc_3_5 = test_acc_3_5 + model_3_5$test_acc
}
# Take the average
train_acc_0_1 = train_acc_0_1 / num_runs
train_acc_3_5 = train_acc_3_5 / num_runs
test_acc_0_1 = test_acc_0_1 / num_runs
test_acc_3_5 = test_acc_3_5 / num_runs
train_accs_0_1 = c(train_accs_0_1, train_acc_0_1)
train_accs_3_5 = c(train_accs_3_5, train_acc_3_5)
test_accs_0_1 = c(test_accs_0_1, test_acc_0_1)
test_accs_3_5 = c(test_accs_3_5, test_acc_3_5)
}
accuracy_type = c(rep('train', length(sizes)), rep('test', length(sizes)))
accuracy_0_1 = c(train_accs_0_1, test_accs_0_1)
accuracy_3_5 = c(train_accs_3_5, test_accs_3_5)
df_0_1 = data.frame(sizes=sizes, accuracy_type=accuracy_type, accuracy=accuracy_0_1)
df_3_5 = data.frame(sizes=sizes, accuracy_type=accuracy_type, accuracy=accuracy_3_5)
# Plotting scatter plot accuracy
ggplot(df_0_1, aes(x=sizes, y=accuracy)) +
geom_point(aes(color=accuracy_type, group=accuracy_type)) +
ggtitle('Training and Test Accuracy over 0/1 Model')
ggplot(df_3_5, aes(x=sizes, y=accuracy)) +
geom_point(aes(color=accuracy_type, group=accuracy_type)) +
ggtitle('Training and Test Accuracy over 3/5 Model')
ggplot(df_0_1, aes(x=sizes, y=accuracy)) +
geom_line(aes(color=accuracy_type, group=accuracy_type)) +
ggtitle('Training and Test Accuracy over 0/1 Model')
ggplot(df_3_5, aes(x=sizes, y=accuracy)) +
geom_line(aes(color=accuracy_type, group=accuracy_type)) +
ggtitle('Training and Test Accuracy over 3/5 Model')
ggplot(df_0_1, aes(x=sizes, y=accuracy)) +
geom_line(aes(color=accuracy_type, group=accuracy_type)) +
ggtitle('Training and Test Accuracy over 0/1 Model')
ggplot(df_3_5, aes(x=sizes, y=accuracy)) +
geom_line(aes(color=accuracy_type, group=accuracy_type)) +
ggtitle('Training and Test Accuracy over 3/5 Model')
image(rotate(ex_0_matrix), main='Class 0')
image(rotate(ex_1_matrix), main='Class 1')
image(rotate(ex_3_matrix), main='Class 3')
image(rotate(ex_5_matrix), main='Class 5')
